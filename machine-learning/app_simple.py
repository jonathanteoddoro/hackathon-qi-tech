from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import JSONResponse
import joblib
import json
import os
from datetime import datetime
import re

# Importar nossos m√≥dulos
from data_generator import SyntheticDataGenerator
from model_trainer import DocumentValidatorTrainer
from ocr_simple import OCRProcessor

app = FastAPI(title="ML Document Validator API", version="1.0.0")

# Vari√°veis globais simples
ocr_processor = OCRProcessor()
model = None

def load_model():
    """Carrega o modelo treinado"""
    global model
    model_path = "models/document_validator.pkl"
    
    if os.path.exists(model_path):
        model = joblib.load(model_path)
        print("‚úÖ Modelo carregado")
        return True
    else:
        print("‚ö†Ô∏è Modelo n√£o encontrado. Execute: python model_trainer.py")
        return False

def extract_features_from_text(text):
    """Extrai features MUITO rigorosas do texto para documentos de propriedade rural"""
    
    # Termos OBRIGAT√ìRIOS para documentos de terra/propriedade rural
    land_property_terms = [
        'escritura', 'propriedade rural', 'fazenda', 'terreno', 'im√≥vel rural',
        'matr√≠cula', 'registro de im√≥vel', 'cart√≥rio de registro', '√°rea rural'
    ]
    
    # Termos OBRIGAT√ìRIOS para CDA/Armaz√©m
    cda_terms = [
        'certificado de dep√≥sito agropecu√°rio', 'cda', 'armaz√©m', 'deposit√°rio', 
        'warrant agropecu√°rio', 'wa', 'produto agropecu√°rio', 'safra'
    ]
    
    # Termos t√©cnicos de agricultura
    agro_technical_terms = [
        'hectares', 'toneladas', 'sacas', 'soja', 'milho', 'trigo', 'algod√£o',
        'bovinos', 'su√≠nos', 'aves', 'cultivo', 'plantio', 'colheita'
    ]
    
    # Termos de documenta√ß√£o oficial
    official_doc_terms = [
        'cart√≥rio', 'tabeli√£o', 'oficial p√∫blico', 'reconhecimento de firma',
        'protocolo', 'livro de registro', 'certid√£o', 'autentica√ß√£o'
    ]
    
    # Termos que INVALIDAM completamente o documento
    invalid_terms = [
        'curr√≠culo', 'cv', 'curriculum', 'experi√™ncia profissional', 'forma√ß√£o acad√™mica',
        'habilidades', 'skills', 'trabalhou', 'emprego', 'empresa', 'cargo',
        'universidade', 'faculdade', 'gradua√ß√£o', 'p√≥s-gradua√ß√£o', 'mestrado',
        'doutorado', 'curso', 'disciplina', 'professor', 'aluno', 'estudante',
        'nvidia', 'inteli', 'challenge', 'academy', 'projeto', 'desenvolvedor',
        'software', 'programa√ß√£o', 'python', 'javascript', 'react', 'node'
    ]
    
    text_lower = text.lower()
    
    # Contagens rigorosas
    land_count = sum(1 for term in land_property_terms if term in text_lower)
    cda_count = sum(1 for term in cda_terms if term in text_lower)
    agro_tech_count = sum(1 for term in agro_technical_terms if term in text_lower)
    official_count = sum(1 for term in official_doc_terms if term in text_lower)
    invalid_count = sum(1 for term in invalid_terms if term in text_lower)
    
    # Verifica√ß√µes OBRIGAT√ìRIAS mais espec√≠ficas
    has_dates = len(re.findall(r'\d{1,2}[\s]*de[\s]*\w+[\s]*de[\s]*\d{4}|\d{1,2}[/\-\.]\d{1,2}[/\-\.]\d{2,4}', text_lower))
    has_cpf_cnpj = len(re.findall(r'\d{3}\.\d{3}\.\d{3}-\d{2}|\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}', text))
    has_money = len(re.findall(r'R\$\s*[\d.,]+|reais|valor|pre√ßo', text_lower))
    has_area_measures = len(re.findall(r'\d+[\s]*(?:hectares?|ha|m¬≤|metros?|alqueires?|toneladas?|sacas?)', text_lower))
    has_coordinates = len(re.findall(r'-?\d+\.\d+.*-?\d+\.\d+', text))
    has_registry_numbers = len(re.findall(r'(?:matr√≠cula|registro|protocolo)[\s\n]*n?[¬∫o¬∞]?\s*[\d\-\.]+', text_lower))
    
    # Comprimento do texto
    text_length = len(text)
    word_count = len(text.split())
    
    # CRIT√âRIOS EXTREMAMENTE RIGOROSOS:
    # Para ser v√°lido o documento DEVE ter:
    
    # 1. PELO MENOS UM tipo de documento v√°lido
    is_land_document = land_count >= 2  # Escritura/propriedade rural
    is_cda_document = cda_count >= 2    # CDA/Armaz√©m
    
    # 2. ZERO termos invalidantes (CV, etc)
    has_invalid_terms = invalid_count > 0
    
    # 3. Elementos t√©cnicos obrigat√≥rios (crit√©rios mais flex√≠veis)
    has_sufficient_agro = agro_tech_count >= 1
    has_sufficient_official = official_count >= 1  
    has_sufficient_dates = has_dates >= 1 or len(re.findall(r'\d{4}', text)) >= 1  # Data ou pelo menos um ano
    has_sufficient_ids = (has_cpf_cnpj >= 1 or has_registry_numbers >= 1)
    has_sufficient_length = text_length >= 200  # Reduzido de 300 para 200
    
    # DECIS√ÉO FINAL RIGOROSA
    is_valid_document_type = is_land_document or is_cda_document
    has_all_requirements = (
        has_sufficient_agro and 
        has_sufficient_official and 
        has_sufficient_dates and 
        has_sufficient_ids and 
        has_sufficient_length
    )
    
    # S√ì √â V√ÅLIDO SE:
    # - √â um tipo de documento v√°lido (terra OU CDA)
    # - N√ÉO tem termos invalidantes
    # - TEM todos os requisitos t√©cnicos
    is_truly_valid = (
        is_valid_document_type and 
        not has_invalid_terms and 
        has_all_requirements
    )
    
    # Features para o modelo ML (mantendo compatibilidade)
    features = [
        land_count + cda_count,      # 0: Documentos v√°lidos
        agro_tech_count,             # 1: Termos t√©cnicos agro
        invalid_count * -10,         # 2: Penalidade por termos inv√°lidos
        has_dates,                   # 3: Datas
        has_cpf_cnpj + has_registry_numbers,  # 4: Identifica√ß√µes
        has_money,                   # 5: Valores
        has_area_measures,           # 6: Medidas de √°rea
        min(text_length/1000, 10),   # 7: Tamanho normalizado
        min(word_count/100, 10),     # 8: Palavras normalizadas
    ]
    
    # Log para debug detalhado
    print(f"üîç An√°lise rigorosa:")
    print(f"   üìã Tipo v√°lido: {is_valid_document_type} (Terra: {is_land_document}, CDA: {is_cda_document})")
    print(f"   ‚ùå Termos inv√°lidos: {has_invalid_terms} ({invalid_count} encontrados)")
    print(f"   üåæ Termos agro suficientes: {has_sufficient_agro} ({agro_tech_count} encontrados)")
    print(f"   üìú Termos oficiais suficientes: {has_sufficient_official} ({official_count} encontrados)")
    print(f"   üìÖ Datas suficientes: {has_sufficient_dates} ({has_dates} encontradas)")
    print(f"   üÜî IDs suficientes: {has_sufficient_ids} (CPF/CNPJ: {has_cpf_cnpj}, Registros: {has_registry_numbers})")
    print(f"   üìè Tamanho suficiente: {has_sufficient_length} ({text_length} caracteres)")
    print(f"   ‚úÖ Requisitos: {has_all_requirements}")
    print(f"   üéØ Decis√£o final: {is_truly_valid}")
    
    return features, is_truly_valid

@app.on_event("startup")
async def startup():
    """Inicializa√ß√£o"""
    print("üöÄ Iniciando API...")
    os.makedirs("data", exist_ok=True)
    os.makedirs("models", exist_ok=True)
    os.makedirs("uploads", exist_ok=True)
    load_model()

@app.get("/")
async def root():
    """Informa√ß√µes da API"""
    return {
        "message": "ML Document Validator API",
        "status": "running",
        "model_loaded": model is not None,
        "endpoints": ["/validate-document", "/health", "/docs"]
    }

@app.get("/health")
async def health():
    """Status da API"""
    return {
        "status": "healthy",
        "model_loaded": model is not None,
        "timestamp": datetime.now().isoformat()
    }

@app.post("/validate-document")
async def validate_document(file: UploadFile = File(...)):
    """Valida um documento"""
    if model is None:
        raise HTTPException(status_code=503, detail="Modelo n√£o carregado")
    
    try:
        # Ler arquivo
        file_content = await file.read()
        
        # Processar com OCR
        ocr_result = ocr_processor.process_uploaded_file(file_content, file.filename)
        
        if not ocr_result["success"]:
            return {
                "is_valid": False,
                "confidence": 0.0,
                "error": ocr_result["error"],
                "extracted_text": ""
            }
        
        extracted_text = ocr_result["text"]
        
        # Extrair features com valida√ß√£o rigorosa
        features, is_rigorously_valid = extract_features_from_text(extracted_text)
        
        # Se n√£o passou na valida√ß√£o rigorosa, retorna inv√°lido direto
        if not is_rigorously_valid:
            return {
                "is_valid": False,
                "confidence": 0.0,
                "extracted_text": extracted_text,
                "reason": "Documento n√£o atende crit√©rios rigorosos para propriedade rural/CDA",
                "ocr_method": ocr_result.get("method_used", "tesseract"),
                "processed_at": datetime.now().isoformat()
            }
        
        # Se passou na valida√ß√£o rigorosa, usa o modelo ML como confirma√ß√£o
        prediction = model.predict([features])[0]
        probabilities = model.predict_proba([features])[0]
        
        return {
            "is_valid": bool(prediction and is_rigorously_valid),
            "confidence": float(max(probabilities)),
            "extracted_text": extracted_text,
            "rigorous_validation": is_rigorously_valid,
            "ocr_method": ocr_result.get("method_used", "tesseract"),
            "processed_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro: {str(e)}")

@app.post("/train-model")
async def train_model():
    """Treina o modelo"""
    try:
        if not os.path.exists("data/synthetic_data.csv"):
            # Gerar dados primeiro
            generator = SyntheticDataGenerator()
            data = generator.generate_dataset(n_samples=1000)
            generator.save_data(data, "data")
        
        # Treinar
        trainer = DocumentValidatorTrainer()
        df = trainer.load_data("data/synthetic_data.csv")
        X, y, _ = trainer.prepare_features(df)
        results, _, _ = trainer.train_models(X, y)
        model_path = trainer.save_model()
        
        # Recarregar modelo
        load_model()
        
        return {
            "success": True,
            "message": "Modelo treinado",
            "accuracy": max([r["accuracy"] for r in results.values()]),
            "model_path": model_path
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro: {str(e)}")

@app.post("/validate-text")
async def validate_text(request: dict):
    """Valida texto diretamente"""
    if model is None:
        raise HTTPException(status_code=503, detail="Modelo n√£o carregado")
    
    text = request.get("text", "")
    if not text:
        raise HTTPException(status_code=400, detail="Texto √© obrigat√≥rio")
    
    try:
        # Extrair features do texto com valida√ß√£o rigorosa
        features, is_rigorously_valid = extract_features_from_text(text)
        
        # Se n√£o passou na valida√ß√£o rigorosa, retorna inv√°lido direto  
        if not is_rigorously_valid:
            return {
                "is_valid": False,
                "confidence": 0.0,
                "extracted_text": text,
                "reason": "Documento n√£o atende crit√©rios rigorosos para propriedade rural/CDA",
                "processed_at": datetime.now().isoformat()
            }
        
        # Se passou na valida√ß√£o rigorosa, usa o modelo ML como confirma√ß√£o
        prediction = model.predict([features])[0]
        probabilities = model.predict_proba([features])[0]
        
        return {
            "is_valid": bool(prediction and is_rigorously_valid),
            "confidence": float(max(probabilities)),
            "extracted_text": text,
            "rigorous_validation": is_rigorously_valid,
            "processed_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    print("üöÄ Iniciando servidor em http://localhost:8000")
    uvicorn.run(app, host="0.0.0.0", port=8000)