#!/usr/bin/env node
const http = require('http');

const BASE_URL = 'http://localhost:3001';
const timestamp = Date.now();

function makeRequest(method, path, data = null, token = null) {
  return new Promise((resolve, reject) => {
    const url = new URL(path, BASE_URL);
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json',
        ...(token && { 'Authorization': `Bearer ${token}` })
      }
    };

    const req = http.request(url, options, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        try {
          resolve({ status: res.statusCode, data: JSON.parse(body) });
        } catch (e) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', reject);
    if (data) req.write(JSON.stringify(data));
    req.end();
  });
}

async function runQuickTest() {
  console.log('üöÄ TESTE R√ÅPIDO DO FLUXO COMPLETO\n');

  try {
    // 1. Registrar Produtor
    console.log('1Ô∏è‚É£ Registrando produtor...');
    const producer = await makeRequest('POST', '/api/auth-v2/register', {
      email: `producer${timestamp}@demo.com`,
      password: 'senha123',
      userType: 'producer',
      profile: { name: 'Jo√£o Silva', farmName: 'Fazenda Demo', location: 'MT' }
    });

    if (!producer.data.success) {
      throw new Error('Falha no registro do produtor');
    }
    console.log('‚úÖ Produtor registrado:', producer.data.data.user.email);
    const producerToken = producer.data.data.token;

    // 2. Registrar Investidor
    console.log('\n2Ô∏è‚É£ Registrando investidor...');
    const investor = await makeRequest('POST', '/api/auth-v2/register', {
      email: `investor${timestamp}@demo.com`,
      password: 'senha123',
      userType: 'investor',
      profile: { name: 'Maria Santos', location: 'SP' }
    });

    if (!investor.data.success) {
      throw new Error('Falha no registro do investidor');
    }
    console.log('‚úÖ Investidor registrado:', investor.data.data.user.email);
    const investorToken = investor.data.data.token;

    // 3. Criar empr√©stimo
    console.log('\n3Ô∏è‚É£ Criando empr√©stimo...');
    const loan = await makeRequest('POST', '/marketplace/loans', {
      requestedAmount: 50000,
      termMonths: 6,
      maxInterestRate: 8.5,
      collateralAmount: 200,
      collateralType: 'soja',
      warehouseLocation: 'Armaz√©m Demo - MT',

      producerToken
    });

    if (!loan.data.success) {
      throw new Error('Falha na cria√ß√£o do empr√©stimo');
    }
    console.log('‚úÖ Empr√©stimo criado:', loan.data.data.id);
    console.log('   üí∞ Valor:', `R$ ${loan.data.data.requestedAmount.toLocaleString()}`);
    const loanId = loan.data.data.id;

    // 4. Listar empr√©stimos
    console.log('\n4Ô∏è‚É£ Listando empr√©stimos...');
    const loans = await makeRequest('GET', '/marketplace/loans');
    console.log('‚úÖ Total de empr√©stimos dispon√≠veis:', loans.data.data.length);

    // 5. Fazer investimento
    console.log('\n5Ô∏è‚É£ Realizando investimento...');
    const investment = await makeRequest('POST', `/marketplace/loans/${loanId}/invest`, {
      investmentAmount: 15000
    }, investorToken);

    if (!investment.data.success) {
      throw new Error('Falha no investimento');
    }
    console.log('‚úÖ Investimento realizado!');
    console.log('   üí∏ Valor investido:', `R$ ${(15000).toLocaleString()}`);
    console.log('   üìä Status do empr√©stimo:', investment.data.data.updatedLoan.status);
    console.log('   üîó Hash da transa√ß√£o:', investment.data.data.transactionHash);

    // 6. Verificar estat√≠sticas
    console.log('\n6Ô∏è‚É£ Verificando estat√≠sticas...');
    const stats = await makeRequest('GET', '/marketplace/stats');
    console.log('‚úÖ Estat√≠sticas do marketplace:');
    console.log('   üìà Total de empr√©stimos:', stats.data.data.totalLoans);
    console.log('   üí∞ Total financiado:', `R$ ${stats.data.data.totalFunding.toLocaleString()}`);
    console.log('   üìä Taxa m√©dia:', `${stats.data.data.averageInterestRate}%`);

    // 7. Verificar posi√ß√£o do investidor
    console.log('\n7Ô∏è‚É£ Verificando posi√ß√£o P2P...');
    const position = await makeRequest('GET', `/marketplace/loans/${loanId}/position`, null, investorToken);
    console.log('‚úÖ Posi√ß√£o do investidor:', position.data.data.position);
    console.log('   üíµ Valor:', `R$ ${(position.data.data.amount).toLocaleString()}`);

    console.log('\nüéâ TESTE COMPLETO FINALIZADO COM SUCESSO! üéâ');
    console.log('\nüìä RESUMO:');
    console.log(`- Produtor: ${producer.data.data.user.email}`);
    console.log(`- Investidor: ${investor.data.data.user.email}`);
    console.log(`- Empr√©stimo: ${loanId} (R$ ${(loan.data.data.requestedAmount).toLocaleString()})`);
    console.log(`- Investimento: R$ ${(15000).toLocaleString()}`);
    console.log(`- Smart Accounts criadas: 2`);
    console.log(`- Transa√ß√µes blockchain: 1`);

  } catch (error) {
    console.error('‚ùå ERRO:', error.message);
  }
}

if (require.main === module) {
  setTimeout(runQuickTest, 1000);
}